{"title":"Operaciones Básicas","markdown":{"yaml":{"bibliography":"references.bib"},"headingText":"Operaciones Básicas","headingAttr":{"id":"sec-data-basics","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n## Introducción\n\n`R` debe entenderse como un lenguaje y ambiente de programación. A lo largo de esta capacitación, se enfocará el trabajo con R como un proceso de exploración de Datos:\n\n![Fuente: [@wickham2023]](images/1.%20Exploración%20de%20Datos.png){fig-align=\"center\"}\n\n## Rstudio\n\nUna vez descargado R y Rstudio, para empezar a trabajar, basta con abrir la aplicación de Rstudio. La ventaja de esta plataforma es que entrega una interfaz más amigable para el trabajo, la cual se divide en 4 partes:\n\n1.  **Consola (parte inferior izquierda):** Es dónde se ejecutan los códigos\n\n2.  **Files (parte inferior derecha):** Posee varias ventanas:\n\n    i)  [Files:]{.underline} Permite navegar por los distintos archivos del computador\n\n    ii) [Plots:]{.underline} Permite mostrar las visualizaciones que creemos\n\n    iii) [Packages:]{.underline} Podemos explorar las distintas librerías con las que trabajaremos\n\n    iv) [Help:]{.underline} Pestaña de ayuda\n\n3.  **Global Environment (parte superior derecha):** Es donde se cargan todos los archivos que importamos a R así como las variables que vayamos creando\n\n4.  **Script (parte superior izquierda):** Permite escribir los códigos para poder guardarlos y compartirlos. Es similar al do file en STATA. *CTRL + ENTER* permite correr el código de la línea seleccionada.\n\n![Fuente: Apuntes de clase curso Introducción a R para Ciencias Sociales](images/2. Componentes de Rstudio.png)\n\n## Operaciones Básicas {#sec-op_basicas}\n\nEl signo \\# permite escribir texto en el R script, el cual no será considerado cómo código al momento de ejecutar un comando:\n\n```{r}\n# Así puedo comentar líneas de comando\n```\n\nR se puede ocupar como calculadora para las principales operaciones matemáticas y operadores lógicos. Por ejemplo, al escribir en la consola 2+2 y apretar ENTER (CTRL + ENTER en el script) nos devolverá el resultado de 4:\n\n```{r}\n2+2\n```\n\nAlguna información relevante respecto de las operaciones es la siguiente:\n\n-   Si una línea termina con una operación, pasará a la siguiente línea para continuar.\n-   Los espacios dentro de una misma línea no se consideran relevantes.\n-   El operador lógico de \"igual\" se escribe: `==`. En general, se suele trabajar con estructuras de datos. La estructura más básica es el vector. Con la función: `c()` que se conoce como combinar, se pueden crear vectores.\n\n| Operador       | Sintaxis                       |\n|----------------|--------------------------------|\n| Suma           | \\+                             |\n| Resta          | \\-                             |\n| División       | /                              |\n| Multiplicación | \\*                             |\n| \\^             | Exponente                      |\n| %%             | Módulo (Resto de una división) |\n| %/%            | División Entera                |\n\n: Operaciones Matemáticas\n\n| Operador              | Sintaxis |\n|-----------------------|----------|\n| Mayor                 | \\>       |\n| Menor                 | \\<       |\n| Igual                 | ==       |\n| Distinto              | !=       |\n| Mayor o igual         | \\>=      |\n| Menor o igual         | \\<=      |\n| En (Contiene a)       | %in%     |\n| No en (No contiene a) | !(%in%)  |\n\n: Operadores Lógicos\n\n### Ejemplos de Aplicación\n\n```{r}\n#Operaciones matemáticas básicas\n\n1 + 2 + 3\n1 +2 *      3\n4.4 / 2.2\n3 ^ 2\n(1+2)* #si una linea termina con una operacion, \"pasará\" a la siguiente linea para continuar\n  3\n\n#Operadores lógicos\n\n2 > 3\n3 > 3\n3 >= 3\n3 == 3\n2 != 3\n\n```\n\n## Operaciones con Vectores\n\nSe pueden realizar operaciones matemáticas con vectores al igual que como se realizan con números.\n\nR entrega mensajes de error y advertencia. Ejemplo de esto último ocurre cuando se realizan operaciones con vectores de distintas dimensiones, en donde el vector más corto se vuelve a operacionalizar con las componentes restantes del vector más largo en orden lógico (izquierda a derecha).\n\n```{r, warning=TRUE}\nc(1,2,3) + c(2,3,4)\n```\n\n```{r, warning=TRUE, echo=TRUE}\nc(1,2,3,4) + c(2,3,4)\n```\n\nEn efecto, vemos que en el segundo caso lo que hace R es el siguiente proceso: $$Z = X + Y =\\{x_1+y_1,x_2+y_2,x_3+y_3,x_4+y_1\\}$$ donde $X$ es un vector tal que $X=\\{x_1=1,x_2=2,x_3=3,x_4=4\\}$ e $Y$ es otro vector tal que $Y=\\{y_1=2,y_2=3,y_3=4\\}$\n\nTambién se puede trabajar con datos de carácter. La forma de indicar que un dato es *string* (carácter) es escribiendo el texto entrecomillas: `\"\"`\n\n```{r}\n\"Esto es un caracter\"\n```\n\nLa función `class()` permite conocer qué tipo de dato es el objeto indicado, es decir, conocer su clase\n\n```{r}\nclass(c(1,2,3))\n```\n\n```{r}\nclass(\"Esto es un caracter\")\n```\n\nCon la función `c()` se pueden crear vectores de datos de carácter, al igual que cómo se realiza con números. También se pueden crear vectores con los valores lógicos: `TRUE`, `FALSE` y `NA`.\n\n```{r}\nc('Hola','Adios')\nclass(c('Hola','Adios'))\n```\n\n```{r}\nc(TRUE,FALSE,NA)\nclass(c(TRUE,FALSE,NA))\n```\n\nEs importante señalar que los vectores solo admiten un tipo de dato, es decir, no se puede combinar en un solo vector datos numéricos y lógicos, por ejemplo. Si se combinan, R hará la transformación correspondiente a un solo tipo de dato.\n\n```{r, warning=TRUE}\nc(2,TRUE)\nclass(c(2,TRUE))\n```\n\n```{r, warning=TRUE}\nc(1,'Hola',FALSE)\nclass(c(1,'Hola',FALSE))\n```\n\n## Creación de Variables\n\nLa creación de variables se operacionaliza con el siguiente símbolo: `<-` o bien *ALT + -*\n\nPor ejemplo, asignar a x el valor 1 se escribe así: `x <- 1`. La forma rápida de escribir el símbolo de creación es a través de: *ALT + -*:\n\n```{r}\nx <- 1\ny <- 2\n```\n\nPara ver más atajos, se puede buscar en herramientas -\\> *Keyboard shortcuts quick reference*. Las variables creadas se muestran en *Global environment*. También se pueden sobrescribir las variables si se ejecuta un código posterior a la primera creación de la variable.\n\nCon la función `c()` se pueden generar vectores combinados en función de las variables creadas. La creación de variables también puede incluir operaciones de variables ya creadas (por ejemplo, `sumadexey <- x+y`):\n\n```{r}\nsumadexey <- x+y\nsumadexey\n```\n\n[**IMPORTANTE:**]{.underline} Al reescribir una variable, por ejemplo, x, se alterará el valor de la variable x, mas no el valor de la variable creada anteriormente `sumadexey`. Es decir, cambiar el valor de x no influye en los objetos ya creados (no es retroactivo). Técnicamente, esta característica se le conoce como que la asignación de valores no es **reactiva**.\n\n```{r}\nsumadexey <- x+y\nx <- 3\nx+y\nsumadexey\n```\n\n### Eliminación de Variables\n\nSe pueden eliminar variables con la función `rm()`que significa *remove*\n\n```{r}\nrm(x)\n```\n\nSi se quiere eliminar todo lo que está en *Global environment* se puede ocupar la siguiente función: `rm(list=ls())`\n\n```{r}\nx <- 3\nz <- 5\nrm(list=ls())\n```\n\n## Trabajo con Objetos\n\nEn la siguiente sección se estudia cómo aprovechar la facilidad de trabajar con objetos en R.\n\nPara crear un vector ocupamos el comando de creación:\n\n```{r}\nvector1 <- c(0,2,4,6,8,10,12,12,14,16,18,20)\n```\n\nPara devolver el valor en la posición 5 del vector, realizamos la siguiente operación:\n\n```{r}\nvector1[5]\n```\n\nEs clave entender la funcionalidad del *corchete* `[]` aplicándolo a una variable x cualquiera:\n\n| Sintaxis | Valor que Entrega |\n|-------------------|-----------------------------------------------------|\n| \\[n positivo\\] | Valor de la componente del vector en la posición n |\n| \\[n negativo\\] | Valor de todas las componentes del vector excepto la posición n |\n| \\[n:m\\] | Valor de las componentes del vector desde la posición n hasta la m inclusive |\n| == n | Operador lógico para cada componente del vector que indica si se cumple la condición (=n) |\n| \\[x==n\\] | Extrae todos los valores del vector que cumplen la condición (valores igual a n) |\n| \\[x!=n\\] | Extrae todos los valores del vector que cumplen la condición (valores distintos a n) |\n\n: Funcionalidad del \\[\\]\n\n```{r}\n\nvector1[-1] #extraer todos los números de vector1 menos el que está en la posición 1\n\nvector1[2:4] #extraer los números entre la posición 2 y 4 (incluyéndolos) de vector1\n\nvector1[c(1,3,5)] #extraer los números en las posiciones 1, 3 y 5 de vector1\n\nvector1 == 12 #vector con operadores lógicos para condición\n\nvector1[vector1==12] #extraer todos los números de vector1 iguales a 12\n\nvector1[vector1!=12] #extraer todos los números de vector1 distintos a 12\n```\n","srcMarkdownNoYaml":"\n\n# Operaciones Básicas {#sec-data-basics .unnumbered}\n\n## Introducción\n\n`R` debe entenderse como un lenguaje y ambiente de programación. A lo largo de esta capacitación, se enfocará el trabajo con R como un proceso de exploración de Datos:\n\n![Fuente: [@wickham2023]](images/1.%20Exploración%20de%20Datos.png){fig-align=\"center\"}\n\n## Rstudio\n\nUna vez descargado R y Rstudio, para empezar a trabajar, basta con abrir la aplicación de Rstudio. La ventaja de esta plataforma es que entrega una interfaz más amigable para el trabajo, la cual se divide en 4 partes:\n\n1.  **Consola (parte inferior izquierda):** Es dónde se ejecutan los códigos\n\n2.  **Files (parte inferior derecha):** Posee varias ventanas:\n\n    i)  [Files:]{.underline} Permite navegar por los distintos archivos del computador\n\n    ii) [Plots:]{.underline} Permite mostrar las visualizaciones que creemos\n\n    iii) [Packages:]{.underline} Podemos explorar las distintas librerías con las que trabajaremos\n\n    iv) [Help:]{.underline} Pestaña de ayuda\n\n3.  **Global Environment (parte superior derecha):** Es donde se cargan todos los archivos que importamos a R así como las variables que vayamos creando\n\n4.  **Script (parte superior izquierda):** Permite escribir los códigos para poder guardarlos y compartirlos. Es similar al do file en STATA. *CTRL + ENTER* permite correr el código de la línea seleccionada.\n\n![Fuente: Apuntes de clase curso Introducción a R para Ciencias Sociales](images/2. Componentes de Rstudio.png)\n\n## Operaciones Básicas {#sec-op_basicas}\n\nEl signo \\# permite escribir texto en el R script, el cual no será considerado cómo código al momento de ejecutar un comando:\n\n```{r}\n# Así puedo comentar líneas de comando\n```\n\nR se puede ocupar como calculadora para las principales operaciones matemáticas y operadores lógicos. Por ejemplo, al escribir en la consola 2+2 y apretar ENTER (CTRL + ENTER en el script) nos devolverá el resultado de 4:\n\n```{r}\n2+2\n```\n\nAlguna información relevante respecto de las operaciones es la siguiente:\n\n-   Si una línea termina con una operación, pasará a la siguiente línea para continuar.\n-   Los espacios dentro de una misma línea no se consideran relevantes.\n-   El operador lógico de \"igual\" se escribe: `==`. En general, se suele trabajar con estructuras de datos. La estructura más básica es el vector. Con la función: `c()` que se conoce como combinar, se pueden crear vectores.\n\n| Operador       | Sintaxis                       |\n|----------------|--------------------------------|\n| Suma           | \\+                             |\n| Resta          | \\-                             |\n| División       | /                              |\n| Multiplicación | \\*                             |\n| \\^             | Exponente                      |\n| %%             | Módulo (Resto de una división) |\n| %/%            | División Entera                |\n\n: Operaciones Matemáticas\n\n| Operador              | Sintaxis |\n|-----------------------|----------|\n| Mayor                 | \\>       |\n| Menor                 | \\<       |\n| Igual                 | ==       |\n| Distinto              | !=       |\n| Mayor o igual         | \\>=      |\n| Menor o igual         | \\<=      |\n| En (Contiene a)       | %in%     |\n| No en (No contiene a) | !(%in%)  |\n\n: Operadores Lógicos\n\n### Ejemplos de Aplicación\n\n```{r}\n#Operaciones matemáticas básicas\n\n1 + 2 + 3\n1 +2 *      3\n4.4 / 2.2\n3 ^ 2\n(1+2)* #si una linea termina con una operacion, \"pasará\" a la siguiente linea para continuar\n  3\n\n#Operadores lógicos\n\n2 > 3\n3 > 3\n3 >= 3\n3 == 3\n2 != 3\n\n```\n\n## Operaciones con Vectores\n\nSe pueden realizar operaciones matemáticas con vectores al igual que como se realizan con números.\n\nR entrega mensajes de error y advertencia. Ejemplo de esto último ocurre cuando se realizan operaciones con vectores de distintas dimensiones, en donde el vector más corto se vuelve a operacionalizar con las componentes restantes del vector más largo en orden lógico (izquierda a derecha).\n\n```{r, warning=TRUE}\nc(1,2,3) + c(2,3,4)\n```\n\n```{r, warning=TRUE, echo=TRUE}\nc(1,2,3,4) + c(2,3,4)\n```\n\nEn efecto, vemos que en el segundo caso lo que hace R es el siguiente proceso: $$Z = X + Y =\\{x_1+y_1,x_2+y_2,x_3+y_3,x_4+y_1\\}$$ donde $X$ es un vector tal que $X=\\{x_1=1,x_2=2,x_3=3,x_4=4\\}$ e $Y$ es otro vector tal que $Y=\\{y_1=2,y_2=3,y_3=4\\}$\n\nTambién se puede trabajar con datos de carácter. La forma de indicar que un dato es *string* (carácter) es escribiendo el texto entrecomillas: `\"\"`\n\n```{r}\n\"Esto es un caracter\"\n```\n\nLa función `class()` permite conocer qué tipo de dato es el objeto indicado, es decir, conocer su clase\n\n```{r}\nclass(c(1,2,3))\n```\n\n```{r}\nclass(\"Esto es un caracter\")\n```\n\nCon la función `c()` se pueden crear vectores de datos de carácter, al igual que cómo se realiza con números. También se pueden crear vectores con los valores lógicos: `TRUE`, `FALSE` y `NA`.\n\n```{r}\nc('Hola','Adios')\nclass(c('Hola','Adios'))\n```\n\n```{r}\nc(TRUE,FALSE,NA)\nclass(c(TRUE,FALSE,NA))\n```\n\nEs importante señalar que los vectores solo admiten un tipo de dato, es decir, no se puede combinar en un solo vector datos numéricos y lógicos, por ejemplo. Si se combinan, R hará la transformación correspondiente a un solo tipo de dato.\n\n```{r, warning=TRUE}\nc(2,TRUE)\nclass(c(2,TRUE))\n```\n\n```{r, warning=TRUE}\nc(1,'Hola',FALSE)\nclass(c(1,'Hola',FALSE))\n```\n\n## Creación de Variables\n\nLa creación de variables se operacionaliza con el siguiente símbolo: `<-` o bien *ALT + -*\n\nPor ejemplo, asignar a x el valor 1 se escribe así: `x <- 1`. La forma rápida de escribir el símbolo de creación es a través de: *ALT + -*:\n\n```{r}\nx <- 1\ny <- 2\n```\n\nPara ver más atajos, se puede buscar en herramientas -\\> *Keyboard shortcuts quick reference*. Las variables creadas se muestran en *Global environment*. También se pueden sobrescribir las variables si se ejecuta un código posterior a la primera creación de la variable.\n\nCon la función `c()` se pueden generar vectores combinados en función de las variables creadas. La creación de variables también puede incluir operaciones de variables ya creadas (por ejemplo, `sumadexey <- x+y`):\n\n```{r}\nsumadexey <- x+y\nsumadexey\n```\n\n[**IMPORTANTE:**]{.underline} Al reescribir una variable, por ejemplo, x, se alterará el valor de la variable x, mas no el valor de la variable creada anteriormente `sumadexey`. Es decir, cambiar el valor de x no influye en los objetos ya creados (no es retroactivo). Técnicamente, esta característica se le conoce como que la asignación de valores no es **reactiva**.\n\n```{r}\nsumadexey <- x+y\nx <- 3\nx+y\nsumadexey\n```\n\n### Eliminación de Variables\n\nSe pueden eliminar variables con la función `rm()`que significa *remove*\n\n```{r}\nrm(x)\n```\n\nSi se quiere eliminar todo lo que está en *Global environment* se puede ocupar la siguiente función: `rm(list=ls())`\n\n```{r}\nx <- 3\nz <- 5\nrm(list=ls())\n```\n\n## Trabajo con Objetos\n\nEn la siguiente sección se estudia cómo aprovechar la facilidad de trabajar con objetos en R.\n\nPara crear un vector ocupamos el comando de creación:\n\n```{r}\nvector1 <- c(0,2,4,6,8,10,12,12,14,16,18,20)\n```\n\nPara devolver el valor en la posición 5 del vector, realizamos la siguiente operación:\n\n```{r}\nvector1[5]\n```\n\nEs clave entender la funcionalidad del *corchete* `[]` aplicándolo a una variable x cualquiera:\n\n| Sintaxis | Valor que Entrega |\n|-------------------|-----------------------------------------------------|\n| \\[n positivo\\] | Valor de la componente del vector en la posición n |\n| \\[n negativo\\] | Valor de todas las componentes del vector excepto la posición n |\n| \\[n:m\\] | Valor de las componentes del vector desde la posición n hasta la m inclusive |\n| == n | Operador lógico para cada componente del vector que indica si se cumple la condición (=n) |\n| \\[x==n\\] | Extrae todos los valores del vector que cumplen la condición (valores igual a n) |\n| \\[x!=n\\] | Extrae todos los valores del vector que cumplen la condición (valores distintos a n) |\n\n: Funcionalidad del \\[\\]\n\n```{r}\n\nvector1[-1] #extraer todos los números de vector1 menos el que está en la posición 1\n\nvector1[2:4] #extraer los números entre la posición 2 y 4 (incluyéndolos) de vector1\n\nvector1[c(1,3,5)] #extraer los números en las posiciones 1, 3 y 5 de vector1\n\nvector1 == 12 #vector con operadores lógicos para condición\n\nvector1[vector1==12] #extraer todos los números de vector1 iguales a 12\n\nvector1[vector1!=12] #extraer todos los números de vector1 distintos a 12\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["webr"],"toc-depth":4,"css":["include/webex.css"],"include-after-body":["include/webex.js"],"output-file":"c0_probabilidad.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","editor":"visual","webr":{"show-startup-message":true},"theme":["cosmo","r4ds.scss"],"number-depth":4,"code-summary":"Quiero ver mi código","author-meta":"Gabriel Duarte Zuñiga","callout-appearance":"simple","bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}