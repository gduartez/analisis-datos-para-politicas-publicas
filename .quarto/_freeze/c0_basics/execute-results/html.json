{
  "hash": "6a3858823a0289a9bf4fb667f6ac5fb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\nbibliography: references.bib\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Primeros Pasos con R {#sec-data-basics .unnumbered}\n\n## Introducción\n\n`R` debe entenderse como un lenguaje y ambiente de programación. A lo largo de este apartado, enfocaremos el uso del software como un proceso de **exploración de datos**:\n\n![Fuente: [@wickham2023]](images/1.%20Exploración%20de%20Datos.png){fig-align=\"center\"}\n\n## Rstudio\n\nUna vez descargado `R` y `Rstudio`, para empezar a trabajar basta con abrir la aplicación ![](images/rstudio.png){width=\"50\"}. La ventaja de esta plataforma es que entrega una interfaz más amigable para el trabajo, la cual se divide en 4 partes:\n\n1.  **Scripts o Editor de Código (Parte Superior Izquierda):** Aquí es donde escribes y guardas tu código. Piensa en esto como un cuaderno digital donde puedes escribir varias líneas de código antes de ejecutarlas. A diferencia de la consola, el código aquí **no** se ejecuta de inmediato. Para hacerlo, primero debes seleccionarlo y presionar **Ctrl + Enter** (Windows/Linux) o **Cmd + Enter** (Mac) para ejecutarlo línea por línea o en bloques.\n\n2.  **Consola (Parte Inferior Izquierda):** Aquí puedes escribir código y ejecutarlo directamente, obteniendo resultados de inmediato. Sin embargo, lo que escribas en la consola no se guarda automáticamente, por lo que es **mejor usar scripts** para guardar tu trabajo y reutilizarlo en el futuro. Al ejecutar un script o una parte de él, código se correra directamente en la consola.\n\n3.  **Environment (Parte Superior Derecha):** Muestra los **objetos** que has creado en tu sesión, como variables, data frames y funciones. Piénsalo como una lista de los elementos con los que estás trabajando.\n\n4.  **Files y Otros Paneles (Parte Inferior Derecha):** una caja de herramientas con varias funciones útiles: [les:]{.underline} Permite navegar por los distintos archivos del computador\n\n    i)  [Files:]{.underline} Permite navegar por entre carpetas y archivos de tu computador o la nube\n\n    ii) [Plots:]{.underline} Muestra los gráficos que generas con R.\n\n    iii) [Packages:]{.underline} Aquí podemos instalar y cargar las distintas librerías con las que trabajaremos.\n\n    iv) [Help:]{.underline} Pestaña de ayuda para buscar sintaxis y argumentos de las funciones que usemos.\n\n    v)  [Viewer:]{.underline} Se usa para visualizar reportes en HTML, tablas y mapas interactivos y otros elementos gráficos.\n\n![Panel Layout Rstudio](images/panel-layout.png)\n\n## Primer Script\n\n1.  Abrir ![](images/rstudio.png){width=\"50\"}\n2.  Abrir un script usando `CTRL + SHIFT + N` o bien usando el menú de Rstudio ![](images/r_script.png){width=\"100\"}. Esto debiese abrir una ventana como la que se ve a continuación:\n\n![](images/script.png)\n\n## Operaciones Básicas {#sec-op-basicas}\n\nEl signo `#` permite escribir texto en el script, el cual no será considerado cómo código al momento de ejecutar un comando:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Así puedo comentar líneas de comando\n```\n:::\n\n\n\n\n`R` se puede ocupar como calculadora para las principales operaciones matemáticas y operadores lógicos. Por ejemplo, al escribir en la consola 2+2 y apretar `ENTER` (o `CTRL + ENTER` si escribo el código en el **script**) nos devolverá el resultado de 4:\n\n```{webr-r}\n2+2\n```\n\nEs importante considerar la siguiente información respecto de las operaciones al escribir código en `R`:\n\n-   Si una línea termina con una operación, pasará a la siguiente línea para continuar.\n-   Los espacios dentro de una misma línea no se consideran relevantes.\n-   El operador lógico de \"igual\" se escribe: `==`.\n\nLas **operaciones matemáticas** más utilizadas se señalan en la siguiente tabla:\n\n| Operador       | Sintaxis                       |\n|----------------|--------------------------------|\n| Suma           | \\+                             |\n| Resta          | \\-                             |\n| División       | /                              |\n| Multiplicación | \\*                             |\n| \\^             | Exponente                      |\n| %%             | Módulo (Resto de una división) |\n| %/%            | División Entera                |\n\n: Operaciones Matemáticas\n\nApliquemos el operado suma y resta:\n\n```{webr-r}\n#Operaciones matemáticas básicas\n\n1 + 2 - 3\n```\n\nVemos que los espacios entre operadores y números no afectan la ejecución de código:\n\n```{webr-r}\n# Si dejo espacio en blanco en una línea, este NO afectará el resultado\n1 +2 *      3\n\n```\n\nEs importante notar que pa escribir decimales se ocupa el \"***.***\" y no la \"***,***\"\n\n```{webr-r}\n# Recordar que los decimales se escriben con un \".\" y no con \",\"\n4.4 / 2.2\n\n3 ^ 2\n\n(1+2)* #si una linea termina con una operacion, \"pasará\" a la siguiente línea para continuar\n  3\n```\n\nEl código y las operaciones se pueden traspasar entre líneas de código. Esto será útil cuando veamos las recomendaciones sobre cómo escribir código para que este sea más entendible:\n\n```{webr-r}\n(1+2)* #si una linea termina con una operacion, \"pasará\" a la siguiente línea para continuar\n  3\n```\n\nMientras que los **operadores lógicos** más usados, estan en la siguiente tabla:\n\n| Operador              | Sintaxis |\n|-----------------------|----------|\n| Mayor                 | \\>       |\n| Menor                 | \\<       |\n| Igual                 | ==       |\n| Distinto              | !=       |\n| Mayor o igual         | \\>=      |\n| Menor o igual         | \\<=      |\n| En (Contiene a)       | %in%     |\n| No en (No contiene a) | !(%in%)  |\n\n: Operadores Lógicos\n\n::: callout-tip\n### Tip\n\nLos operadores lógicos nos serán de mucha ayuda cuando trabajemos con la manipulación de datos, lo cual se verá en el apartado de Herramientas para la Ciencia de Datos. En particular, el operador `%in%` nos permitirá eficientar nuestro código cuando queramos hacer filtros o selecciones múltiples.\n:::\n\n### Ejemplos\n\n```{webr-r}\n#Operadores lógicos\n\n2 > 3\n3 > 3\n3 >= 3\n3 == 3\n2 != 3\n\n```\n\n## Operaciones con Vectores\n\nEn general, se suele trabajar con estructuras de datos. La estructura más básica es el vector. Con la función `c()` (que se conoce como combinar) se pueden crear vectores.\n\nSe pueden realizar operaciones matemáticas con vectores al igual que como se realizan con números.\n\n`R` entrega mensajes de error y advertencia. Ejemplo de esto último ocurre cuando se realizan operaciones con vectores de distintas dimensiones, en donde el vector más corto se vuelve a operacionalizar con las componentes restantes del vector más largo en orden lógico (izquierda a derecha).\n\n```{webr-r}\n#| read-only: true\n\nc(1,2,3) + c(2,3,4)\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4) + c(2,3,4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in c(1, 2, 3, 4) + c(2, 3, 4): longitud de objeto mayor no es múltiplo\nde la longitud de uno menor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 5 7 6\n```\n\n\n:::\n:::\n\n\n\n\nEn efecto, vemos que en el segundo caso lo que hace R es el siguiente proceso: $$Z = X + Y =\\{x_1 +y_1,x_2+ y_2,x_3+y_3,x_4+y_1\\}$$ donde $X$ es un vector tal que $X=\\{x_1=1,x_2=2,x_3=3,x_4=4\\}$ e $Y$ es otro vector tal que $Y=\\{y_1=2,y_2=3,y_3=4\\}$\n\nTambién se puede trabajar con datos de carácter. La forma de indicar que un dato es *string* (carácter) es escribiendo el texto entrecomillas: `\"\"`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Esto es un caracter\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Esto es un caracter\"\n```\n\n\n:::\n:::\n\n\n\n\nLa función `class()` permite conocer qué tipo de dato es el objeto indicado, es decir, conocer su clase\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(c(1,2,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"Esto es un caracter\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\nCon la función `c()` se pueden crear vectores de datos de carácter, al igual que cómo se realiza con números. También se pueden crear vectores con los valores lógicos: `TRUE`, `FALSE` y `NA`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc('Hola','Adios')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola\"  \"Adios\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c('Hola','Adios'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE,FALSE,NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE    NA\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c(TRUE,FALSE,NA))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n\nEs importante señalar que los vectores solo admiten un tipo de dato, es decir, no se puede combinar en un solo vector datos numéricos y lógicos, por ejemplo. Si se combinan, R hará la transformación correspondiente a un solo tipo de dato.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2,TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c(2,TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,'Hola',FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"     \"Hola\"  \"FALSE\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c(1,'Hola',FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n## Creación de Variables\n\nLa creación de variables u *objetos* se operacionaliza con el siguiente símbolo: `<-` o bien `ALT + -`\n\nPor ejemplo, asignar a x el valor 1 se escribe así: `x <- 1`. La forma rápida de escribir el símbolo de creación es a través de: *ALT + -*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- 2\n```\n:::\n\n\n\n\nPara ver más atajos, se puede buscar en herramientas -\\> *Keyboard shortcuts quick reference*.\n\n![](images/shortcuts.png)\n\nLas variables creadas se muestran en *Global environment*. También se pueden sobrescribir las variables si se ejecuta un código posterior a la primera creación de la variable.\n\nCon la función `c()` se pueden generar vectores combinados en función de las variables creadas. La creación de variables también puede incluir operaciones de variables ya creadas (por ejemplo, `sumadexey <- x+y`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumadexey <- x+y\nsumadexey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n::: callout-important\n### Importante\n\nAl reescribir una variable, por ejemplo, x, se alterará el valor de la variable x, mas no el valor de la variable creada anteriormente `sumadexey`. Es decir, cambiar el valor de x **no influye en los objetos ya creados**. Técnicamente, esta característica se le conoce como que la asignación de valores **no es reactiva**.\n\nLo anterior implica que, a medida que vamos realizando cambios en un mismo objeto, si queremos corregir algo en un paso intermedio, debemos asegurarnos de correr todo el código **desde el inicio** (o al menos en las partes relevantes) con el fin de minimizar los riesgos de cometer un error en nuestros cálculos.\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumadexey <- x+y\nx <- 3\nx+y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nsumadexey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n### Eliminación de Variables\n\nSe pueden eliminar variables con la función `rm()`que significa *remove*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\n```\n:::\n\n\n\n\nSi se quiere eliminar todo lo que está en *Global environment* se puede ocupar la siguiente función: `rm(list=ls())`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\nz <- 5\nrm(list=ls())\n```\n:::\n\n\n\n\n## Trabajo con Objetos\n\nEn la siguiente sección se estudia cómo aprovechar la facilidad de trabajar con objetos en R.\n\nPara crear un vector ocupamos el comando de creación:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1 <- c(0,2,4,6,8,10,12,12,14,16,18,20)\n```\n:::\n\n\n\n\nPara devolver el valor en la posición 5 del vector, realizamos la siguiente operación:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1[5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n\n\nEs clave entender la funcionalidad del *corchete* `[]` aplicándolo a una variable x cualquiera:\n\n| Sintaxis | Valor que Entrega |\n|------------------------------------|------------------------------------|\n| \\[n positivo\\] | Valor de la componente del vector en la posición n |\n| \\[n negativo\\] | Valor de todas las componentes del vector excepto la posición n |\n| \\[n:m\\] | Valor de las componentes del vector desde la posición n hasta la m inclusive |\n| == n | Operador lógico para cada componente del vector que indica si se cumple la condición (=n) |\n| \\[x==n\\] | Extrae todos los valores del vector que cumplen la condición (valores igual a n) |\n| \\[x!=n\\] | Extrae todos los valores del vector que cumplen la condición (valores distintos a n) |\n\n: Funcionalidad del \\[\\]\n\n### Ejemplos\n\nVeamos algunos ejemplos aplicados al vector1 de números pares entre 0 y 20:\n\nA)  **Extraer todos los números del vector1, a excepción del que está en la posición 1:**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvector1[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  2  4  6  8 10 12 12 14 16 18 20\n```\n\n\n:::\n:::\n\n\n\n\nB)  **Extraer los números entre la posición 2 y 4 (incluyéndolos) del vector1**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvector1[2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6\n```\n\n\n:::\n:::\n\n\n\n\nC)  **Extraer los números en las posiciones 1, 3 y 5 de vector1**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvector1[c(1,3,5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 4 8\n```\n\n\n:::\n:::\n\n\n\n\nD)  **Evaluar para cada elemento del vector si se cumple la condición de ser igual a 12**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvector1 == 12 #vector con operadores lógicos para condición\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n:::\n\n\n\n\nE)  **Extraer todos los números de vector1 que cumplan la condición de ser igual a 12**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvector1[vector1==12] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12 12\n```\n\n\n:::\n:::\n\n\n\n\nF)  **Extraer todos los números de vector1 distintos a 12**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nvector1[vector1!=12]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  2  4  6  8 10 14 16 18 20\n```\n\n\n:::\n:::\n\n\n\n\n## Ejercicios Aplicados\n\nEn esta sección trabajaremos con datos de Chile que nos permitan realizar algunas de las operaciones básicas revisadas. Estos datos son sobre:\n\n1.  Población comunal.\n2.  Datos delictuales.\n\n::: callout-important\n### Importante\n\nPara responder preguntas que incluyan decimales, es necesario usar el `.` como separador en lugar de la `,` ya que R sigue la convención anglosajona de puntuación.\n:::\n\n### Población Según División Administrativa de Chile\n\nLa división territorial de Chile contempla las siguientes unidades geográficas:\n\n-   El país completo se divide en **16 regiones**.\n-   Cada región se subdivide a la vez en **provincias**, las cuales suman **56** a nivel nacional.\n-   De manera análoga, cada provincia contempla un número definido de **comunas**, las cuales suman **346** en total.\n\nConsidere el caso de la XV Región de Arica y Parinacota, la cual está compuesta por las provincias de Arica y Parinacota. La provincia de Arica, contiene a las comunas de Arica y Camarones, mientras que la provincia de Parinacota, a las comunas de General Lagos y Putre. Según proyecciones del censo 2017, la población en el año 2025 de cada comuna es la siguiente:\n\n| Comuna        | Población Año 2025 |\n|---------------|--------------------|\n| Arica         | 259.064            |\n| Camarones     | 1.248              |\n| General Lagos | 797                |\n| Putre         | 2.578              |\n\n: Población Comunal año 2025 Región de Arica y Parinacota según proyecciones Censo 2017.\n\nUtilizando los datos de población entregada, responda las siguientes preguntas:\n\n::: {.callout-quiz .callout}\n#### Población XV° Región\n\n1.  ¿Cuánta es la población de la **Provincia de Arica**? <input class='webex-solveme nospaces' size='6' data-answer='[\"260312\"]'/>\n\n2.  ¿Cuánta es la población de la **Provincia de Parinacota**? <input class='webex-solveme nospaces' size='4' data-answer='[\"3375\"]'/>\n\n3.  ¿Cuánta es la población de la **Región de Arica y Parinacota**? <input class='webex-solveme nospaces' size='6' data-answer='[\"263687\"]'/>\n\n4.  ¿Qué porcentaje representa la población de la comuna de Arica respecto a la población regional? (aproxime a dos decimales) <input class='webex-solveme nospaces' size='5' data-answer='[\"98.25\"]'/>\n:::\n\n**¡Intenta responder usando R!**\n\n1.  Población de la provincia de Arica\n\n```{webr-r}\n*** + 1248\n```\n\n2.  Población de la provincia de Parinacota\n\n```{webr-r}\n\n797 *** ***\n```\n\n3.  Población de la Región de Arica y Parinacota\n\n```{webr-r}\n\n*** + *** + *** + *** \n```\n\n4.  Porcentaje de la Población de Arica sobre el total de la región. *Hint: utiliza* `help(round)` *para obtener ayuda sobre la función*.\n\n```{webr-r}\n\nround(***/(***)*100,***)\n```\n\n### Registros Delictuales\n\nEn Chile, existen diversas fuentes que reportan la cantidad de delitos ocurridos. Una de las más importantes, es la que sitematiza la Subsecreataría de Prevención del Delito a partir de los **casos policiales**.\n\nEste último indicador, es una de las variables principales para analizar la ocurrencia de hechos delictivos. Considera las **denuncias** de delitos que realiza la comunidad en las unidades policiales, más las **detenciones** que realizan las policías ante la ocurrencia de delitos flagrantes. Internacionalmente, este indicador es conocido como “delitos conocidos por la policía” (*crimes known to police*).\n\nGeneralmente, al analizar la evolución del fenómeno en el tiempo, se suelen usar dos formas de medición:\n\n1.  **Frecuencia Simple:** Presenta la cantidad de ilícitos registrados en una unidad territorial determinada.\n\n2.  **Tasa Cada 100.000 Habitantes:** Es un indicador que relaciona el total de ilícitos –registrados por las policías a través de una denuncia o una detención flagrante– de un territorio con su población. Su importancia metodológica es que permite **comparar distintos niveles territoriales** (comuna, región y país), en **distintos períodos de tiempo** (meses, trimestres y años). Se calcula dividiendo el total de delitos registrados por las policías en un periodo de tiempo (meses, trimestres o años) por la población de referencia para ese mismo periodo, el resultado es multiplicado por 100 mil. De esta forma, la tasa delictual cada 100.000 habitantes queda definida como $$Tasa_{itj} = \\frac{Frecuencia_{it}}{Población_{jt}}\\times 100.000$$\n\ndonde $i$ representa el delito analizado y $j$ el territorio analizado y $t$ el periodo de tiempo analizado.\n\n3.  **Variación Porcentual:** Indica si la variable en estudio aumentó o disminuyó. Si la variación resulta positiva significa que la variable aumentó en valor, si la variación resulta negativa significa que la variable disminuyó en valor. Matemáticamente, un variación porcentual se calcula como: $$\\Delta\\% = \\frac{valor_{t1} - valor_{t0}}{valor_{t0}}\\times 100 = [\\frac{valor_{t1}}{valor_{t0}}-1]\\times 100$$\n\ndonde $t0$ corresponde al periodo inicial y $t1$ al periodo final (por ejemplo, año de inicio de la comparación o $t0$ y año de término de la comparación o $t1$).\n\nConsiderando lo anterior, responda las siguientes preguntas aproximando el valor entregado **a un solo decimal**.\n\n::: {.callout-quiz .callout}\n#### Homicidios en Chile\n\n1.  Según datos del observatorio de homicidios, en el año 2023 hubo 1.248 víctimas consumadas de homicidios. Si la población nacional proyectada para el año 2023 era de 19.960.889 habitantes ¿Cuál fue la tasa de víctimas de homicidios consumados cada 100.000 habitantes en el año 2023? <input class='webex-solveme nospaces' size='3' data-answer='[\"6.3\"]'/>\n\n2.  En el año 2022 se registraron 1.330 víctimas de homicidios consumados y hubo una proyección de población de 19.828.563 ¿Cuánto fue la variación porcentual de la **cantidad** de víctimas consumadas de homicidios entre 2022 y 2023? <input class='webex-solveme nospaces' size='4' data-answer='[\"-6.2\"]'/>\n\n3.  Asumamos que la población en Chile permanece constante entre el año 2022 y el año 2023. En ese contexto, un colega suyo le dice que es mejor calcular la variación porcentual en términos de tasa que en términos de frecuencia ¿Qué le respondería usted?\n\n4.  En el año 2021, en El Salvador se registraron 1.085 víctimas de homicidios intencionales, mientras que en el año siguiente en Chile se registraron 1.330 víctimas de homicidio. A partir de esto, un colega le señala que *Chile está experimentando un nivel de violencia más alto de lo que era El Salvador en el año 2021 y en periodos anteriores* ¿Que le respondería usted a su colega?\n:::\n\n## Bibliografía\n\n<!-- ```{r} -->\n\n<!-- tasa22 <- 1330/19828563*100000 -->\n\n<!-- tasa23 <- 1248/19960889*100000 -->\n\n<!-- tasa22_23 <- 1330/19960889*100000 -->\n\n<!-- #Variación -->\n\n<!-- (tasa23/tasa22_23-1)*100 -->\n\n<!-- (tasa23/tasa22-1)*100 -->\n\n<!-- (1248/1330-1)*100 -->\n\n<!-- ``` -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}