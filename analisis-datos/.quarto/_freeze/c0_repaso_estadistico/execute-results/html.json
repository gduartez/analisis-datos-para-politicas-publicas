{
  "hash": "d6a1f6cbf3ea7d2901317378e5469cd8",
  "result": {
    "engine": "knitr",
    "markdown": "---\nbibliography: references.bib\n---\n\n\n\n\n\n# Operaciones Básicas {#sec-data-import}\n\n## Introducción\n\n`R` debe entenderse como un lenguaje y ambiente de programación. A lo largo de esta capacitación, se enfocará el trabajo con R como un proceso de exploración de Datos:\n\n![Fuente: [@wickham2023]](images/1.%20Exploración%20de%20Datos.png){fig-align=\"center\"}\n\n## Rstudio\n\nUna vez descargado R y Rstudio, para empezar a trabajar, basta con abrir la aplicación de Rstudio. La ventaja de esta plataforma es que entrega una interfaz más amigable para el trabajo, la cual se divide en 4 partes:\n\n1.  **Consola (parte inferior izquierda):** Es dónde se ejecutan los códigos\n\n2.  **Files (parte inferior derecha):** Posee varias ventanas:\n\n    i)  [Files:]{.underline} Permite navegar por los distintos archivos del computador\n\n    ii) [Plots:]{.underline} Permite mostrar las visualizaciones que creemos\n\n    iii) [Packages:]{.underline} Podemos explorar las distintas librerías con las que trabajaremos\n\n    iv) [Help:]{.underline} Pestaña de ayuda\n\n3.  **Global Environment (parte superior derecha):** Es donde se cargan todos los archivos que importamos a R así como las variables que vayamos creando\n\n4.  **Script (parte superior izquierda):** Permite escribir los códigos para poder guardarlos y compartirlos. Es similar al do file en STATA. *CTRL + ENTER* permite correr el código de la línea seleccionada.\n\n![Fuente: Apuntes de clase curso Introducción a R para Ciencias Sociales](images/2. Componentes de Rstudio.png)\n\n## Operaciones Básicas {#sec-op_basicas}\n\nEl signo \\# permite escribir texto en el R script, el cual no será considerado cómo código al momento de ejecutar un comando:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Así puedo comentar líneas de comando\n```\n:::\n\n\n\n\n\nR se puede ocupar como calculadora para las principales operaciones matemáticas y operadores lógicos. Por ejemplo, al escribir en la consola 2+2 y apretar ENTER (CTRL + ENTER en el script) nos devolverá el resultado de 4:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2+2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\nAlguna información relevante respecto de las operaciones es la siguiente:\n\n-   Si una línea termina con una operación, pasará a la siguiente línea para continuar.\n-   Los espacios dentro de una misma línea no se consideran relevantes.\n-   El operador lógico de \"igual\" se escribe: `==`. En general, se suele trabajar con estructuras de datos. La estructura más básica es el vector. Con la función: `c()` que se conoce como combinar, se pueden crear vectores.\n\n| Operador       | Sintaxis                       |\n|----------------|--------------------------------|\n| Suma           | \\+                             |\n| Resta          | \\-                             |\n| División       | /                              |\n| Multiplicación | \\*                             |\n| \\^             | Exponente                      |\n| %%             | Módulo (Resto de una división) |\n| %/%            | División Entera                |\n\n: Operaciones Matemáticas\n\n| Operador              | Sintaxis |\n|-----------------------|----------|\n| Mayor                 | \\>       |\n| Menor                 | \\<       |\n| Igual                 | ==       |\n| Distinto              | !=       |\n| Mayor o igual         | \\>=      |\n| Menor o igual         | \\<=      |\n| En (Contiene a)       | %in%     |\n| No en (No contiene a) | !(%in%)  |\n\n: Operadores Lógicos\n\n### Ejemplos de Aplicación\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Operaciones matemáticas básicas\n\n1 + 2 + 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n\n```{.r .cell-code}\n1 +2 *      3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n4.4 / 2.2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n3 ^ 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\n(1+2)* #si una linea termina con una operacion, \"pasará\" a la siguiente linea para continuar\n  3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\n#Operadores lógicos\n\n2 > 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n3 > 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n3 >= 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n3 == 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n2 != 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n## Operaciones con Vectores\n\nSe pueden realizar operaciones matemáticas con vectores al igual que como se realizan con números.\n\nR entrega mensajes de error y advertencia. Ejemplo de esto último ocurre cuando se realizan operaciones con vectores de distintas dimensiones, en donde el vector más corto se vuelve a operacionalizar con las componentes restantes del vector más largo en orden lógico (izquierda a derecha).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3) + c(2,3,4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 5 7\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,2,3,4) + c(2,3,4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in c(1, 2, 3, 4) + c(2, 3, 4): longitud de objeto mayor no es múltiplo\nde la longitud de uno menor\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 5 7 6\n```\n\n\n:::\n:::\n\n\n\n\n\nEn efecto, vemos que en el segundo caso lo que hace R es el siguiente proceso: $$Z = X + Y =\\{x_1+y_1,x_2+y_2,x_3+y_3,x_4+y_1\\}$$ donde $X$ es un vector tal que $X=\\{x_1=1,x_2=2,x_3=3,x_4=4\\}$ e $Y$ es otro vector tal que $Y=\\{y_1=2,y_2=3,y_3=4\\}$\n\nTambién se puede trabajar con datos de carácter. La forma de indicar que un dato es *string* (carácter) es escribiendo el texto entrecomillas: `\"\"`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Esto es un caracter\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Esto es un caracter\"\n```\n\n\n:::\n:::\n\n\n\n\n\nLa función `class()` permite conocer qué tipo de dato es el objeto indicado, es decir, conocer su clase\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(c(1,2,3))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(\"Esto es un caracter\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\nCon la función `c()` se pueden crear vectores de datos de carácter, al igual que cómo se realiza con números. También se pueden crear vectores con los valores lógicos: `TRUE`, `FALSE` y `NA`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc('Hola','Adios')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola\"  \"Adios\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c('Hola','Adios'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE,FALSE,NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE    NA\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c(TRUE,FALSE,NA))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n\n\nEs importante señalar que los vectores solo admiten un tipo de dato, es decir, no se puede combinar en un solo vector datos numéricos y lógicos, por ejemplo. Si se combinan, R hará la transformación correspondiente a un solo tipo de dato.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2,TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c(2,TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1,'Hola',FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"     \"Hola\"  \"FALSE\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(c(1,'Hola',FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Creación de Variables\n\nLa creación de variables se operacionaliza con el siguiente símbolo: `<-` o bien *ALT + -*\n\nPor ejemplo, asignar a x el valor 1 se escribe así: `x <- 1`. La forma rápida de escribir el símbolo de creación es a través de: *ALT + -*:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1\ny <- 2\n```\n:::\n\n\n\n\n\nPara ver más atajos, se puede buscar en herramientas -\\> *Keyboard shortcuts quick reference*. Las variables creadas se muestran en *Global environment*. También se pueden sobrescribir las variables si se ejecuta un código posterior a la primera creación de la variable.\n\nCon la función `c()` se pueden generar vectores combinados en función de las variables creadas. La creación de variables también puede incluir operaciones de variables ya creadas (por ejemplo, `sumadexey <- x+y`):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumadexey <- x+y\nsumadexey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n[**IMPORTANTE:**]{.underline} Al reescribir una variable, por ejemplo, x, se alterará el valor de la variable x, mas no el valor de la variable creada anteriormente `sumadexey`. Es decir, cambiar el valor de x no influye en los objetos ya creados (no es retroactivo). Técnicamente, esta característica se le conoce como que la asignación de valores no es **reactiva**.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsumadexey <- x+y\nx <- 3\nx+y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n\n```{.r .cell-code}\nsumadexey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n### Eliminación de Variables\n\nSe pueden eliminar variables con la función `rm()`que significa *remove*\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(x)\n```\n:::\n\n\n\n\n\nSi se quiere eliminar todo lo que está en *Global environment* se puede ocupar la siguiente función: `rm(list=ls())`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\nz <- 5\nrm(list=ls())\n```\n:::\n\n\n\n\n\n## Trabajo con Objetos\n\nEn la siguiente sección se estudia cómo aprovechar la facilidad de trabajar con objetos en R.\n\nPara crear un vector ocupamos el comando de creación:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1 <- c(0,2,4,6,8,10,12,12,14,16,18,20)\n```\n:::\n\n\n\n\n\nPara devolver el valor en la posición 5 del vector, realizamos la siguiente operación:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1[5]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n\n\n\nEs clave entender la funcionalidad del *corchete* `[]` aplicándolo a una variable x cualquiera:\n\n| Sintaxis | Valor que Entrega |\n|-------------------|-----------------------------------------------------|\n| \\[n positivo\\] | Valor de la componente del vector en la posición n |\n| \\[n negativo\\] | Valor de todas las componentes del vector excepto la posición n |\n| \\[n:m\\] | Valor de las componentes del vector desde la posición n hasta la m inclusive |\n| == n | Operador lógico para cada componente del vector que indica si se cumple la condición (=n) |\n| \\[x==n\\] | Extrae todos los valores del vector que cumplen la condición (valores igual a n) |\n| \\[x!=n\\] | Extrae todos los valores del vector que cumplen la condición (valores distintos a n) |\n\n: Funcionalidad del \\[\\]\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1[-1] #extraer todos los números de vector1 menos el que está en la posición 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  2  4  6  8 10 12 12 14 16 18 20\n```\n\n\n:::\n\n```{.r .cell-code}\nvector1[2:4] #extraer los números entre la posición 2 y 4 (incluyéndolos) de vector1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4 6\n```\n\n\n:::\n\n```{.r .cell-code}\nvector1[c(1,3,5)] #extraer los números en las posiciones 1, 3 y 5 de vector1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 4 8\n```\n\n\n:::\n\n```{.r .cell-code}\nvector1 == 12 #vector con operadores lógicos para condición\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nvector1[vector1==12] #extraer todos los números de vector1 iguales a 12\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12 12\n```\n\n\n:::\n\n```{.r .cell-code}\nvector1[vector1!=12] #extraer todos los números de vector1 distintos a 12\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  2  4  6  8 10 14 16 18 20\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}